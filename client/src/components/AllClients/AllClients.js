import { useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import { getClients } from "../../redux/actions/clients.action";
import { Link } from "react-router-dom";
import { useState } from "react";
import "./AllClients.css";
import Star from "./Star";
import { setDelStar } from "../../redux/actions/clients.action";
import { setAddStar } from "../../redux/actions/clients.action";

import SearchIcon from '@material-ui/icons/Search';

export default function AllClients() {
  const {
    values: clients,
    error,
    loading,
  } = useSelector((state) => state.clients);
  const dispatch = useDispatch();

  useEffect(() => {
    dispatch(getClients());
  }, [dispatch]);

  //================== SEARCH

  let keyCl = ["surname", "patronymic", "email", "phone", "address", "addstar"];

  function translit(word) {
    var answer = "";
    var converter = {
      –∞: "a",
      –±: "b",
      –≤: "v",
      –≥: "g",
      –¥: "d",
      –µ: "e",
      —ë: "e",
      –∂: "zh",
      –∑: "z",
      –∏: "i",
      –π: "y",
      –∫: "k",
      –ª: "l",
      –º: "m",
      –Ω: "n",
      –æ: "o",
      –ø: "p",
      —Ä: "r",
      —Å: "s",
      —Ç: "t",
      —É: "u",
      —Ñ: "f",
      —Ö: "h",
      —Ü: "c",
      —á: "ch",
      —à: "sh",
      —â: "sch",
      —å: "",
      —ã: "y",
      —ä: "",
      —ç: "e",
      —é: "yu",
      —è: "ya",

      –ê: "A",
      –ë: "B",
      –í: "V",
      –ì: "G",
      –î: "D",
      –ï: "E",
      –Å: "E",
      –ñ: "Zh",
      –ó: "Z",
      –ò: "I",
      –ô: "Y",
      –ö: "K",
      –õ: "L",
      –ú: "M",
      –ù: "N",
      –û: "O",
      –ü: "P",
      –†: "R",
      –°: "S",
      –¢: "T",
      –£: "U",
      –§: "F",
      –•: "H",
      –¶: "C",
      –ß: "Ch",
      –®: "Sh",
      –©: "Sch",
      –¨: "",
      –´: "Y",
      –™: "",
      –≠: "E",
      –Æ: "Yu",
      –Ø: "Ya",
    };

    for (var i = 0; i < word.length; ++i) {
      if (converter[word[i]] == undefined) {
        answer += word[i];
      } else {
        answer += converter[word[i]];
      }
    }

    return answer;
  }

  let filtredClients = clients;
  const [value, setValue] = useState("");
  if (value) {
    function helpMePlease(item) {
      for (let i = 0; i < keyCl.length; i++) {
        if (!item.hasOwnProperty(keyCl[i])) item[keyCl[i]] = "";
      }
      if (item.name.toLowerCase().includes(value.toLowerCase().trim()))
        return true;
      if (item.surname.toLowerCase().includes(value.toLowerCase().trim()))
        return true;
      if (item.patronymic.toLowerCase().includes(value.toLowerCase().trim()))
        return true;
      if (item.email.toLowerCase().includes(value.toLowerCase().trim()))
        return true;
      if (item.phone.toLowerCase().includes(value.toLowerCase().trim()))
        return true;

      if (
        translit(item.name.toLowerCase()).includes(value.toLowerCase().trim())
      )
        return true;
      if (
        translit(item.surname.toLowerCase()).includes(
          value.toLowerCase().trim()
        )
      )
        return true;
      if (
        translit(item.patronymic.toLowerCase()).includes(
          value.toLowerCase().trim()
        )
      )
        return true;
      if (
        translit(item.email.toLowerCase()).includes(value.toLowerCase().trim())
      )
        return true;
      if (
        translit(item.phone.toLowerCase()).includes(value.toLowerCase().trim())
      )
        return true;
    }
    filtredClients = clients.filter(helpMePlease);
  }

  const clearInput = () => {
    //e.preventDefault()
    setValue("");
  };

  //============== STARS

  const currUser = useSelector((state) => state.user?._id);

  let num;
  let clientId;
  let clientStarArr;

  const converterStars = (client) => {
    clientId = client?._id;
    clientStarArr = client.addstar;
    if (clientStarArr.length) {
      if (client.addstar.includes(currUser)) {
        num = clientStarArr.indexOf(currUser);
        clientStarArr.splice(num, 1);
        console.log("–∑–∞—à–ª–∏ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ");
        //     fetch('http://localhost:3001/clients/stardell', {
        //   method: "PATCH",
        //   headers: {
        //     "Content-Type": "application/json",
        //   },
        //   body: JSON.stringify({ clientId, currUser }),
        // }).then
        dispatch(setDelStar(client, currUser));
        return true;
      }
      clientStarArr.push(clientId);
      //   fetch('http://localhost:3001/clients/staradd', {
      //   method: "PATCH",
      //   headers: {
      //     "Content-Type": "application/json",
      //   },
      //   body: JSON.stringify({ clientId, currUser }),
      // }).then(() =>
      dispatch(setAddStar(client, currUser));
      return true;
    }
    clientStarArr.push(clientId);
    //   fetch('http://localhost:3001/clients/staradd', {
    //   method: "PATCH",
    //   headers: {
    //     "Content-Type": "application/json",
    //   },
    //   body: JSON.stringify({ clientId, currUser }),
    // }).then(() =>
    dispatch(setAddStar(client, currUser));
    return true;
  };

  function check(client) {
    if (client.addstar.length) {
      if (client.addstar.includes(currUser)) return true;
      return false;
    }
    return false;
  }

  return (
    <div className="allClients">
      <div className="conteiner">
      <h1 className="title-client">–ù–∞—à–∏ –∫–ª–∏–µ–Ω—Ç—ã</h1>
      <form onSubmit={() => clearInput()} className="search_form">
        <input
          onChange={(event) => setValue(event.target.value)}
          type="text"
          placeholder="üîé&nbsp;&nbsp; –ü–æ–∏—Å–∫ –∑–¥–µ—Å—å..."
          className="search_input"
          
        />
      </form>
      {loading ? (
        <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
      ) : error ? (
        <p>–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</p>
      ) : (
        <>
          {clients.length === 0 ? (
            <p>–ö–ª–∏–µ–Ω—Ç–æ–≤ –Ω–µ—Ç</p>
          ) : (
            <ul className="clientsList">
              {filtredClients?.map((cl) => (
                <li style={{ position: "relative" }}>
                  <span className="descr">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</span>
                  <Star cl={cl} converterStars={converterStars} check={check} />
                  <Link key={cl._id} to={`/clients/client/${cl._id}`}>
                    <div className="clientsItem">
                      <div className="image">
                        <img
                          src="/profile.png"
                          alt=""
                          style={{ width: 200, height: 200 }}
                        />
                      </div>
                      <div className="clientsInfo">
                        –§–ò–û:&nbsp;
                        {cl.surname}&nbsp;{cl.name}
                        <br /> {cl.patronymic}
                        <br />
                        email:&nbsp;{cl.email}
                        <br />
                        –ù–æ–º–µ—Ä:&nbsp;{cl.phone}
                      </div>
                    </div>
                  </Link>
                </li>
              ))}
            </ul>
          )}
        </>
      )}
    </div>
      </div>
  );
}
